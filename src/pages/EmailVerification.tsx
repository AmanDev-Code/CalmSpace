import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { Layout } from '@/components/Layout';
import { OtpInput } from '@/components/OtpInput';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { verifyOTP, sendOTPEmail, isEmailVerified } from '@/lib/otpService';
import { useToast } from '@/hooks/use-toast';
import { Loader2, CheckCircle, XCircle, RefreshCw } from 'lucide-react';
import { initOtpEmailJS } from '@/lib/otpEmailService';

interface LocationState {
  email: string;
  name: string;
  password: string;
}

const EmailVerification = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const [resendDisabled, setResendDisabled] = useState(true);
  const [resendCountdown, setResendCountdown] = useState(60);
  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'failed'>('pending');
  
  // Extract state from location
  const state = location.state as LocationState;
  
  useEffect(() => {
    // Initialize OTP EmailJS
    initOtpEmailJS();
    console.log('OTP EmailJS service initialized in EmailVerification component');
    
    // Redirect to signup if no email in state
    if (!state?.email) {
      console.log('No email in state, redirecting to signup');
      navigate('/signup');
      return;
    }
    
    console.log('Email verification page loaded for:', state.email);
    
    // Start countdown for resend button
    const countdownInterval = setInterval(() => {
      setResendCountdown((prev) => {
        if (prev <= 1) {
          setResendDisabled(false);
          clearInterval(countdownInterval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    // Clean up interval
    return () => clearInterval(countdownInterval);
  }, [navigate, state]);
  
  const handleVerify = async (otp: string) => {
    if (!state?.email) return;
    
    setIsLoading(true);
    console.log('Verifying OTP for:', state.email);
    
    const result = verifyOTP(state.email, otp);
    console.log('Verification result:', result);
    
    if (result.valid) {
      setVerificationStatus('success');
      toast({
        title: "Verification Successful",
        description: "Your email has been verified successfully!",
      });
      
      // Navigate to login after a brief delay
      setTimeout(() => {
        navigate('/login', { 
          state: { 
            verifiedEmail: state.email,
            password: state.password,
            message: "Email verified successfully. You can now log in." 
          }
        });
      }, 2000);
    } else {
      setVerificationStatus('failed');
      toast({
        variant: "destructive",
        title: "Verification Failed",
        description: result.message,
      });
      setTimeout(() => {
        setVerificationStatus('pending');
      }, 1500);
    }
    
    setIsLoading(false);
  };
  
  const handleResendOTP = async () => {
    if (!state?.email || resendDisabled) return;
    
    setIsLoading(true);
    console.log('Resending OTP for:', state.email);
    
    try {
      // Ensure the OTP EmailJS service is initialized
      initOtpEmailJS();
      console.log('OTP EmailJS service initialized for resend');
      
      // Import the module directly to ensure we're using the latest version
      const { sendOtpEmail } = await import('@/lib/otpEmailService');
      
      // First try using the direct OTP email service
      console.log('Attempting to send OTP directly via otpEmailService...');
      const otpParams = {
        to_name: state.name || 'User',
        to_email: state.email,
        otp_code: 'GENERATED_BY_SERVICE', // This will be generated by the service
        expiry_minutes: 15
      };
      
      // Try the direct service first
      try {
        const directResult = await sendOtpEmail(otpParams);
        if (directResult.success) {
          console.log('Successfully sent OTP using direct service');
          toast({
            title: "OTP Resent",
            description: "A new verification code has been sent to your email.",
          });
          
          // Reset countdown
          setResendDisabled(true);
          setResendCountdown(60);
          
          const countdownInterval = setInterval(() => {
            setResendCountdown((prev) => {
              if (prev <= 1) {
                setResendDisabled(false);
                clearInterval(countdownInterval);
                return 0;
              }
              return prev - 1;
            });
          }, 1000);
          
          setIsLoading(false);
          return;
        } else {
          console.warn('Direct OTP service failed, falling back to main service:', directResult.message);
        }
      } catch (directError) {
        console.error('Error using direct OTP service:', directError);
      }
      
      // If direct method fails, fall back to the main service
      console.log('Falling back to main OTP service...');
      const result = await sendOTPEmail(state.email, state.name || 'User');
      console.log('Resend OTP result:', result);
      
      if (result.success) {
        toast({
          title: "OTP Resent",
          description: "A new verification code has been sent to your email.",
        });
        
        // Reset countdown
        setResendDisabled(true);
        setResendCountdown(60);
        
        const countdownInterval = setInterval(() => {
          setResendCountdown((prev) => {
            if (prev <= 1) {
              setResendDisabled(false);
              clearInterval(countdownInterval);
              return 0;
            }
            return prev - 1;
          });
        }, 1000);
      } else {
        toast({
          variant: "destructive",
          title: "Failed to Resend",
          description: result.message || "Unable to send verification code. Please try again later.",
        });
      }
    } catch (error) {
      console.error('Error resending OTP:', error);
      toast({
        variant: "destructive",
        title: "Failed to Resend",
        description: "An unexpected error occurred. Please try again later.",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <Layout>
      <section className="py-16 min-h-screen flex items-center justify-center bg-calm-cream/30">
        <div className="container mx-auto px-4 max-w-md">
          <Card className="shadow-xl border-none bg-white/90 backdrop-blur-sm">
            <CardHeader className="text-center pb-6">
              <div className="mx-auto mb-4">
                <img 
                  src="/assets/brandLogo.png" 
                  alt="CalmSpace Logo" 
                  className="h-24 w-auto" 
                />
              </div>
              <CardTitle className="text-3xl font-bold text-calm-gray">Verify Your Email</CardTitle>
              <CardDescription className="text-calm-gray/70 text-lg">
                Enter the verification code sent to {state?.email}
              </CardDescription>
            </CardHeader>
            
            <CardContent>
              {verificationStatus === 'pending' ? (
                <div className="space-y-8">
                  <OtpInput 
                    length={6} 
                    onComplete={handleVerify} 
                    disabled={isLoading}
                    className="my-8"
                    inputClassName={`bg-calm-cream/20 border-calm-blue/30 ${isLoading ? 'opacity-50' : ''}`}
                  />
                  
                  <div className="text-center text-calm-gray/70 text-sm">
                    Didn't receive the code?{" "}
                    <Button
                      variant="link"
                      className={`text-calm-blue p-0 h-auto ${resendDisabled ? 'opacity-50 cursor-not-allowed' : ''}`}
                      disabled={resendDisabled || isLoading}
                      onClick={handleResendOTP}
                    >
                      Resend {resendDisabled && `(${resendCountdown}s)`}
                    </Button>
                  </div>
                </div>
              ) : verificationStatus === 'success' ? (
                <div className="py-8 text-center">
                  <div className="flex justify-center mb-4">
                    <CheckCircle className="h-16 w-16 text-green-500" />
                  </div>
                  <h3 className="text-xl font-semibold text-calm-gray mb-2">Verification Successful</h3>
                  <p className="text-calm-gray/70">
                    Your email has been verified. Redirecting you to login...
                  </p>
                </div>
              ) : (
                <div className="py-8 text-center">
                  <div className="flex justify-center mb-4">
                    <XCircle className="h-16 w-16 text-red-500" />
                  </div>
                  <h3 className="text-xl font-semibold text-calm-gray mb-2">Verification Failed</h3>
                  <p className="text-calm-gray/70">
                    The code you entered is incorrect or expired. Please try again.
                  </p>
                </div>
              )}
            </CardContent>
            
            <CardFooter className="flex justify-center border-t border-gray-100 pt-6">
              <Button 
                variant="ghost" 
                className="text-calm-gray font-medium"
                onClick={() => navigate('/signup')}
              >
                Cancel Verification
              </Button>
            </CardFooter>
          </Card>
        </div>
      </section>
    </Layout>
  );
};

export default EmailVerification; 